name: F-Droid Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # This allows manual triggering of the workflow, which results in making F-Droid APK build
  # Go to the "Actions" tab the repository, select this workflow, and click the "Run workflow" button to run it manually.
  workflow_dispatch: 

jobs:
  build-fdroid:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      
      - name: Run F-Droid Tests
        run: ./gradlew testFdroidDebugUnitTest
        
      # Make sure CI environment variable is always set - this helps build.gradle.kts identify CI builds
      - name: Set CI Environment Variable
        run: echo "CI=true" >> $GITHUB_ENV
        
      - name: Check for Keystore Secret
        id: check_keystore
        run: |
          if [[ -n "${{ secrets.KEYSTORE_BASE64 }}" && "${{ secrets.KEYSTORE_BASE64 }}" != "" ]]; then
            echo "has_keystore=true" >> $GITHUB_OUTPUT
            echo "Found keystore secret, will attempt to use it"
            
            # Print secret length without revealing content
            SECRET_LENGTH=$(echo "${{ secrets.KEYSTORE_BASE64 }}" | wc -c)
            echo "Keystore base64 string length: $SECRET_LENGTH"
            
            # Check if the secret appears to be a valid base64 string
            if echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > /dev/null 2>&1; then
              echo "Keystore base64 format appears valid"
            else
              echo "::warning::Keystore base64 format appears invalid - check your KEYSTORE_BASE64 secret"
            fi
          else
            echo "has_keystore=false" >> $GITHUB_OUTPUT
            echo "No keystore secret found, will use debug keystore"
          fi
      
      - name: Decode Keystore
        if: steps.check_keystore.outputs.has_keystore == 'true'
        run: |
          # Echo the keystore to a file using base64 decoding
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > release.keystore
          
          # Check if the keystore file was created and has content
          if [ -s release.keystore ]; then
            echo "✓ Keystore decoded successfully"
            echo "Keystore file size: $(wc -c < release.keystore) bytes"
            
            # Test different password combinations to debug issues
            echo "Testing keystore with provided password..."
            keytool -list -keystore release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" > /tmp/keytool-output.txt 2>&1 || echo "Failed with provided password"
            
            if grep -q "Keystore type:" /tmp/keytool-output.txt; then
              echo "✓ Keystore format is valid and password is correct"
              cat /tmp/keytool-output.txt | grep -v Fingerprint
            else
              echo "::warning::Keystore format is invalid or password is incorrect with provided password"
              
              # Try with empty password
              echo "Testing keystore with empty password..."
              keytool -list -keystore release.keystore -storepass "" > /tmp/keytool-empty.txt 2>&1 || echo "Failed with empty password"
              
              if grep -q "Keystore type:" /tmp/keytool-empty.txt; then
                echo "::warning::Keystore works with EMPTY PASSWORD - update your KEYSTORE_PASSWORD secret!"
                # Use empty password moving forward
                echo "KEYSTORE_PASSWORD_OVERRIDE=" >> $GITHUB_ENV
              else
                # Try with default "android" password
                echo "Testing keystore with 'android' as password..."
                keytool -list -keystore release.keystore -storepass "android" > /tmp/keytool-android.txt 2>&1 || echo "Failed with 'android' password"
                
                if grep -q "Keystore type:" /tmp/keytool-android.txt; then
                  echo "::warning::Keystore works with 'android' as password - update your KEYSTORE_PASSWORD secret!"
                  # Use android password moving forward
                  echo "KEYSTORE_PASSWORD_OVERRIDE=android" >> $GITHUB_ENV
                fi
              fi
            fi
            
            # Try to get basic info about the keystore
            echo "Available aliases in the keystore:"
            keytool -list -keystore release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" 2>/dev/null | grep "," || echo "Could not list aliases"
            
            # Create a copy for debugging
            cp release.keystore "$GITHUB_WORKSPACE/release.keystore.copy"
            chmod 644 "$GITHUB_WORKSPACE/release.keystore.copy"
          else
            echo "::warning::Keystore file is empty after decoding, will fall back to debug keystore"
            rm -f release.keystore
          fi

      - name: Setup Release Signing Environment
        if: steps.check_keystore.outputs.has_keystore == 'true' && hashFiles('release.keystore')
        run: |
          # Set absolute path to keystore
          KEYSTORE_FULL_PATH="$GITHUB_WORKSPACE/release.keystore"
          echo "KEYSTORE_PATH=$KEYSTORE_FULL_PATH" >> $GITHUB_ENV
          if [ -n "$KEYSTORE_PASSWORD_OVERRIDE" ]; then
            echo "Using password override: $KEYSTORE_PASSWORD_OVERRIDE"
            echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD_OVERRIDE" >> $GITHUB_ENV
          else
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          fi
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
          
          # Verify file permissions and existence
          ls -la "$KEYSTORE_FULL_PATH"
          
          # Test keystore access directly with the file path (not using env vars)
          echo "Testing keystore access..."
          keytool -list -keystore "$KEYSTORE_FULL_PATH" -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" 2>&1 || echo "Failed to access keystore"
          
          # Print information about the keystore (without exposing secrets)
          echo "Keystore details:"
          keytool -list -keystore "$KEYSTORE_FULL_PATH" -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | grep "Keystore" || echo "Could not read keystore information"
          
          echo "✓ Signing environment variables set for production keystore"
          
      - name: Setup Debug Signing Environment (Fallback)
        if: steps.check_keystore.outputs.has_keystore != 'true' || !hashFiles('release.keystore')
        run: |
          echo "Using debug keystore as fallback"
          
          # Create a fresh debug keystore as fallback
          echo "Creating a fresh debug keystore as fallback..."
          rm -f debug.keystore
          keytool -genkey -v -keystore debug.keystore -storepass android -keypass android -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          
          # Export this keystore path as env var
          echo "KEYSTORE_PATH=$GITHUB_WORKSPACE/debug.keystore" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=android" >> $GITHUB_ENV
          echo "KEY_ALIAS=androiddebugkey" >> $GITHUB_ENV
          echo "KEY_PASSWORD=android" >> $GITHUB_ENV
          
          echo "✓ Debug keystore created and environment variables set"
      
      - name: Build F-Droid APK
        run: |
          # Print out environment information for debugging (no secrets)
          echo "Building with Java version:"
          java -version
          
          # List the environment variables being used (without revealing secrets)
          echo "Environment variables used for signing:"
          echo "CI=${CI}"
          echo "KEYSTORE_PATH exists: $([ -n "$KEYSTORE_PATH" ] && echo "YES" || echo "NO")"
          echo "KEYSTORE_PATH file exists: $([ -f "$KEYSTORE_PATH" ] && echo "YES" || echo "NO")"
          echo "KEYSTORE_PASSWORD exists: $([ -n "$KEYSTORE_PASSWORD" ] && echo "YES" || echo "NO")"
          echo "KEY_ALIAS exists: $([ -n "$KEY_ALIAS" ] && echo "YES" || echo "NO")"
          echo "KEY_PASSWORD exists: $([ -n "$KEY_PASSWORD" ] && echo "YES" || echo "NO")"
          
          # Make sure the keystore is readable
          if [ -f "$KEYSTORE_PATH" ]; then
            ls -la "$KEYSTORE_PATH"
          fi
          
          # Create a properties file for signing
          if [ -f "$KEYSTORE_PATH" ]; then
            echo "Creating gradle.properties with signing information..."
            cat > ~/.gradle/gradle.properties << EOF
            CI=true
            KEYSTORE_PATH=$KEYSTORE_PATH
            KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD
            KEY_ALIAS=$KEY_ALIAS
            KEY_PASSWORD=$KEY_PASSWORD
            EOF
            chmod 600 ~/.gradle/gradle.properties
            echo "✓ Created gradle.properties file"
          fi
          
          # Try to build with debug level logging
          echo "Building F-Droid APK with info logging..."
          ./gradlew assembleFdroidRelease --info

      - name: Extract version name
        id: version
        run: |
          VERSION_NAME=$(grep -o 'versionName = "[^"]*"' app/build.gradle.kts | cut -d'"' -f2)
          echo "VERSION=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "App version name extracted: $VERSION_NAME"

      - name: Rename APK
        run: |
          mkdir -p artifact
          cp app/build/outputs/apk/fdroid/release/app-fdroid-release.apk artifact/trmnl-mirror-fdroid-v${{ steps.version.outputs.VERSION }}.apk

      - name: Upload F-Droid APK
        uses: actions/upload-artifact@v4
        with:
          name: trmnl-mirror-fdroid
          path: artifact/trmnl-mirror-fdroid-v${{ steps.version.outputs.VERSION }}.apk
          # Use maximum allowed retention period
          # https://github.com/actions/upload-artifact?tab=readme-ov-file#retention-period
          retention-days: 90
