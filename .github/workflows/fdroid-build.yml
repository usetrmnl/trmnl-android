name: F-Droid Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # This allows manual triggering of the workflow, which results in making F-Droid APK build
  # Go to the "Actions" tab the repository, select this workflow, and click the "Run workflow" button to run it manually.
  workflow_dispatch: 

jobs:
  build-fdroid:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      
      - name: Run F-Droid Tests
        run: ./gradlew testFdroidDebugUnitTest
        
      # Make sure CI environment variable is always set - this helps build.gradle.kts identify CI builds
      - name: Set CI Environment Variable
        run: echo "CI=true" >> $GITHUB_ENV
        
      - name: Check for Keystore Secret
        id: check_keystore
        run: |
          if [[ -n "${{ secrets.KEYSTORE_BASE64 }}" && "${{ secrets.KEYSTORE_BASE64 }}" != "" ]]; then
            echo "has_keystore=true" >> $GITHUB_OUTPUT
            echo "Found keystore secret, will attempt to use it"
          else
            echo "has_keystore=false" >> $GITHUB_OUTPUT
            echo "No keystore secret found, will use debug keystore"
          fi
      
      - name: Decode Keystore
        if: steps.check_keystore.outputs.has_keystore == 'true'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > release.keystore
          if [ -s release.keystore ]; then
            echo "✓ Keystore decoded successfully"
          else
            echo "::warning::Keystore file is empty after decoding, will fall back to debug keystore"
            rm -f release.keystore
            exit 0  # Continue workflow even if this step fails
          fi

      - name: Setup Release Signing Environment
        if: steps.check_keystore.outputs.has_keystore == 'true' && hashFiles('release.keystore')
        run: |
          echo "KEYSTORE_PATH=$GITHUB_WORKSPACE/release.keystore" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "✓ Signing environment variables set for production keystore"
          
      - name: Setup Debug Signing Environment (Fallback)
        if: steps.check_keystore.outputs.has_keystore != 'true' || !hashFiles('release.keystore')
        run: |
          echo "Using debug keystore as fallback"
          echo "✓ Debug keystore will be used automatically by Gradle"
      
      - name: Build F-Droid APK
        run: |
          # Add verbose output for signing config to help diagnose issues
          ./gradlew assembleFdroidRelease --info

      - name: Extract version name
        id: version
        run: |
          VERSION_NAME=$(grep -o 'versionName = "[^"]*"' app/build.gradle.kts | cut -d'"' -f2)
          echo "VERSION=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "App version name extracted: $VERSION_NAME"

      - name: Rename APK
        run: |
          mkdir -p artifact
          cp app/build/outputs/apk/fdroid/release/app-fdroid-release.apk artifact/trmnl-mirror-fdroid-v${{ steps.version.outputs.VERSION }}.apk

      - name: Upload F-Droid APK
        uses: actions/upload-artifact@v4
        with:
          name: trmnl-mirror-fdroid
          path: artifact/trmnl-mirror-fdroid-v${{ steps.version.outputs.VERSION }}.apk
          # Use maximum allowed retention period
          # https://github.com/actions/upload-artifact?tab=readme-ov-file#retention-period
          retention-days: 90
